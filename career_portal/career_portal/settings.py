"""
Django settings for career_portal project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os # Ensure os is imported
from decouple import config, Csv # Added for python-decouple

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1,localhost', cast=Csv())


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',  # Required for django-storages
    'careers',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'career_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'career_portal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Example for using DATABASE_URL from .env with dj_database_url
# import dj_database_url
# DATABASES['default'] = dj_database_url.config(default=f'sqlite:///{BASE_DIR / "db.sqlite3"}', conn_max_age=600)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# If you want to use DATABASE_URL, uncomment the lines above and ensure dj_database_url is installed.
# For now, we are keeping the default SQLite configuration.


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

GEMINI_API_KEY = config('GEMINI_API_KEY', default='your_gemini_api_key_here_if_not_set')

# LLM Model Configuration
LLM_MODEL_NAME = config('LLM_MODEL_NAME', default='gemini/gemini-pro')

# FILE STORAGE CONFIGURATION (Loaded from environment variables)
# ------------------------------------------------------------------------------
# Determine storage backend from environment variable
storage_backend_env = config('STORAGE_BACKEND', default='local')

STORAGES = {
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    }
}

# GCS Variables (loaded regardless of backend, as they might be used by other parts or for reference)
GS_BUCKET_NAME = config('GS_BUCKET_NAME', default='')
GS_PROJECT_ID = config('GS_PROJECT_ID', default='') # Optional, often inferred by GCS client libraries
GS_CREDENTIALS = config('GS_CREDENTIALS', default=None) # Path to GCS key file
GS_FILE_OVERWRITE = config('GS_FILE_OVERWRITE', default=False, cast=bool) # django-storages default is True for GCS
GS_DEFAULT_ACL = config('GS_DEFAULT_ACL', default=None) # e.g., 'publicRead'
# GS_LOCATION for subdirectory in GCS, e.g., 'media/'
GS_LOCATION = config('GS_LOCATION', default='')


# AWS S3 Variables (loaded regardless of backend for consistency if switching)
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID', default='')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY', default='')
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', default='')
AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default='')
AWS_S3_ENDPOINT_URL = config('AWS_S3_ENDPOINT_URL', default=None)
AWS_S3_CUSTOM_DOMAIN = config('AWS_S3_CUSTOM_DOMAIN', default=None)
AWS_LOCATION = config('AWS_S3_LOCATION', default='') # Renamed from AWS_LOCATION to avoid conflict with GS_LOCATION if both were used in options
AWS_S3_FILE_OVERWRITE = config('AWS_S3_FILE_OVERWRITE', default=False, cast=bool) # Default is True for S3
AWS_DEFAULT_ACL = config('AWS_S3_DEFAULT_ACL', default=None) # e.g., 'public-read'


if storage_backend_env == 'gcs':
    
    STORAGES['default'] = {
        'BACKEND': 'storages.backends.gcloud.GoogleCloudStorage',
        # OPTIONS are not typically needed if GS_BUCKET_NAME, GS_PROJECT_ID, and
        # GOOGLE_APPLICATION_CREDENTIALS (env var) or GS_CREDENTIALS_PATH are set.
        # django-storages will use these environment settings.
        # Example of explicit options if needed:
        'OPTIONS': {
             'bucket_name': GS_BUCKET_NAME,
             'project_id': GS_PROJECT_ID,
             'credentials': GS_CREDENTIALS if GS_CREDENTIALS else None,
        }
    }
    if GS_BUCKET_NAME:
        MEDIA_URL = f"https://storage.googleapis.com/{GS_BUCKET_NAME}/{GS_LOCATION if GS_LOCATION else ''}"
    else:
        MEDIA_URL = '/gcs_bucket_not_configured/'
    # MEDIA_ROOT is not used for GCS with django-storages

elif storage_backend_env == 's3':
    STORAGES['default'] = {
        'BACKEND': 'storages.backends.s3.S3Storage',
        # Similar to GCS, options are typically derived from environment variables
        # like AWS_STORAGE_BUCKET_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, etc.
        # 'OPTIONS': {
        #     'bucket_name': AWS_STORAGE_BUCKET_NAME,
        #     # etc.
        # }
    }
    if AWS_S3_CUSTOM_DOMAIN:
        MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION if AWS_LOCATION else ''}"
    elif AWS_STORAGE_BUCKET_NAME:
        MEDIA_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/{AWS_LOCATION if AWS_LOCATION else ''}"
    else:
        MEDIA_URL = '/s3_bucket_not_configured/'
    # MEDIA_ROOT is not used for S3

else:  # 'local' or default
    STORAGES['default'] = {
        'BACKEND': 'django.core.files.storage.FileSystemStorage',
        # 'OPTIONS': { # Options for FileSystemStorage if needed
        #     'location': os.path.join(BASE_DIR, 'mediafiles_custom'), # Example
        #     'base_url': '/media_custom/', # Example
        # }
    }
    MEDIA_URL = config('MEDIA_URL', default='/media/')
    MEDIA_ROOT = config('MEDIA_ROOT', default=os.path.join(BASE_DIR, 'mediafiles'))
    # Ensure MEDIA_ROOT directory exists if using local storage (can be handled in AppConfig.ready)
    # os.makedirs(MEDIA_ROOT, exist_ok=True)

# Ensure MEDIA_URL is defined if not caught by specific backend logic (should always be set by above logic)
if 'MEDIA_URL' not in locals():
    MEDIA_URL = '/media_default_fallback/' # Fallback, ideally the logic above covers all cases.

# DEFAULT_FILE_STORAGE is no longer used directly. The STORAGES setting handles this.
# Static files (CSS, JavaScript, Images) are handled by STORAGES['staticfiles']
# Ensure STATIC_URL is defined (usually earlier in the file)
# STATIC_URL = 'static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_collected') # Example if using collectstatic
